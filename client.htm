<!DOCTYPE html>
<html>

<style>
  html,
  body {
    margin: 0;
    padding: 0;
  }
  body {
    height: 100vh;
    width: 100vw;
    overscroll-behavior-y: contain;
    background-color: #3ac96f;
  }
  .fullscreen-button {
    width: 70px;
    height: 70px;
    font-size: 12px;
    user-select: none;
  }
  * {
    box-sizing: border-box;
  }
</style>

<body>
  <button class="fullscreen-button" onclick="showFullScreenConfirmation()">FullScreen</button> 
</body>

<script>

const socket = new WebSocket("ws://192.168.1.30:8080/ws");  //localhost should be the server's local ip address.
const encoder = new TextEncoder()


const clamp = (num, min, max) => Math.min(Math.max(num, min), max); 
const rightClickTouchDuration = 800
let isTouchMove = false;

// Connection established with the server 
socket.onopen = function(event) {
  console.log("Connection Established.");
};

// Message is received from server
socket.onmessage = function(event) {
  const message = event.data;
  console.log("Recieved message: " + message);

};

// Connection closed.
socket.onclose = function(event) {
  console.log("Connection closed.");
};

function showFullScreenConfirmation() {
  let text = "Connection Established. Enable FullScreen Mode?";
    if (confirm(text) == true) {
      let docElm = document.documentElement;
      if (docElm.requestFullscreen) {
        docElm.requestFullscreen();
      } else if (docElm.msRequestFullscreen) {
        docElm.msRequestFullscreen();
      } else if (docElm.mozRequestFullScreen) {
        docElm.mozRequestFullScreen();
      } else if (docElm.webkitRequestFullScreen) {
        docElm.webkitRequestFullScreen();
      }
  } 
}

// Sending mouse coordinates to server as byte array
function sendMouseMovement(x, y) {
  const movement = { x: x, y: y };
  socket.send(encoder.encode(JSON.stringify(movement)));
}

function sendLeftMouseClick() {
  socket.send("LeftClick")
}

function sendRightMouseClick() {
  socket.send("RightClick")
}

// Listening touch events and getting x, y coordinates.

let initialPoint = { x: 0, y: 0}
let currentPoint   = { x: 0, y: 0}

document.addEventListener('touchstart', function(e){

  let touchobj = e.changedTouches[0]; // reference to first touch point.
  initialPoint = {x: touchobj.clientX, y: touchobj.clientY};

  timeout = setTimeout(sendRightMouseClick, rightClickTouchDuration);

  isTouchMove = false;
  e.preventDefault()
}, false)

document.addEventListener('touchmove', function(e) {
  let touchobj = e.changedTouches[0];

  clearTimeout(timeout);

  currentPoint = { x: touchobj.clientX, y: touchobj.clientY };

  let offsetX = Math.round(currentPoint.x - initialPoint.x);
  let offsetY = Math.round(currentPoint.y - initialPoint.y);

  sendMouseMovement(clamp(offsetX, -100, 100), clamp(offsetY, -100, 100));
 
  isTouchMove = true;
 
  e.preventDefault()
}, false)

document.addEventListener('touchend', function(e) {
  clearTimeout(timeout);

  if(!isTouchMove) {
    console.log("clicked")
    sendLeftMouseClick()
  }

}, false);

</script>

</body>
</html> 

